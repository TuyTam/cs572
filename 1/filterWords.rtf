{\rtf1\ansi\ansicpg1252\cocoartf1671
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-BoldItalic;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red82\green0\blue103;\red103\green104\blue52;\red0\green0\blue109;
\red55\green113\blue112;\red15\green112\blue3;}
{\*\expandedcolortbl;;\csgenericrgb\c32157\c0\c40392;\csgenericrgb\c40392\c40784\c20392;\csgenericrgb\c0\c0\c42745;
\csgenericrgb\c21569\c44314\c43922;\csgenericrgb\c5882\c43922\c1176;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 String.prototype.filterWords1 = function(input)\{\
  let words = this.split(" ");\
  words = words.map(x => input.includes(x)? "***" : x);\
  return words.join(" ");\
\}\
console.log("ES6:");\
console.log("This house is nice".filterWords1(['house','nice']))\
\
//Promise\
\
String.prototype.filterWords2 = function(input)\{\
  let words = this.split(" ");\
  \
  let promise = function()\{\
    return new Promise(function(resolve, reject)\{\
    words = words.map(x => input.includes(x)? "***" : x);\
      if(words !== null)\{\
        resolve(words.join(" ") + "=> from Promise");\
      \}\
      else\{\
        reject("Failed");\
      \}\
   \
  \});\
  \};\
  \
  let getPromise = function()\{\
     promise()\
  .then((message)=>console.log(message))\
  .catch(err => console.error(err));\
  \}\
 \
 getPromise();\
  \
\}\
console.log("Promise:");\
console.log("This house is nice".filterWords2(['house','nice']) + "=== Promise")\
\
//Async/await\
\
String.prototype.filterWords3 = function(input)\{\
  let words = this.split(" ");\
  \
  let promise = function()\{\
    return new Promise(function(resolve, reject)\{\
    words = words.map(x => input.includes(x)? "***" : x);\
      if(words !== null)\{\
        resolve(words.join(" "));\
      \}\
      else\{\
        reject("Failed");\
      \}\
   \
  \});\
  \};\
  \
  async function waitForPromise()\{\
    try\{\
      console.log("Before async/await for promise");\
      let result = await promise();\
      console.log(result + "====from async/await");\
      console.log("After async/await for promise");\
    \}\
    catch\{\
      console.log("error");\
    \}\
 \
  \}\
 \
 waitForPromise();\
  \
\}\
console.log("$$$$$ Async/Await :");\
console.log("This house is nice".filterWords3(['house','nice']))\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\i\b \cf2 String
\f2\i0\b0 \cf0 .
\f3\b \cf2 prototype
\f2\b0 \cf0 .\cf3 filterWords4 \cf0 = 
\f3\b \cf4 function 
\f2\b0 \cf0 (input) \{\
    
\f3\b \cf4 const
\f2\b0 \cf0 \{\cf5 from\cf0 \} = rxjs;\
    
\f3\b \cf4 const
\f2\b0 \cf0 \{\cf5 map\cf0 ,\cf5 reduce\cf0 \} = rxjs.operators;\
    
\f3\b \cf4 let 
\f2\b0 \cf5 words \cf0 = 
\f3\b \cf4 this
\f2\b0 \cf0 .\cf3 split\cf0 (
\f3\b \cf6 " "
\f2\b0 \cf0 );\
\
    \cf5 from\cf0 (\cf5 words\cf0 ).pipe(\
        \cf5 map\cf0 (x => input.\cf3 includes\cf0 (x) ? 
\f3\b \cf6 "***" 
\f2\b0 \cf0 : x),\
        \cf5 reduce\cf0 ((x,y) => x + 
\f3\b \cf6 " " 
\f2\b0 \cf0 + y)\
    ).\cf3 subscribe\cf0 (\
            x => 
\f1\i\b \cf2 console
\f2\i0\b0 \cf0 .\cf3 log\cf0 (x),\
            
\f3\b \cf4 null
\f2\b0 \cf0 ,\
            ()=> 
\f1\i\b \cf2 console
\f2\i0\b0 \cf0 .\cf3 log\cf0 (
\f3\b \cf6 'done'
\f2\b0 \cf0 )\
        )\
\
\}\
\

\f1\i\b \cf2 console
\f2\i0\b0 \cf0 .\cf3 log\cf0 (
\f3\b \cf6 "This house is nice"
\f2\b0 \cf0 .filterWords4([
\f3\b \cf6 'house'
\f2\b0 \cf0 ,
\f3\b \cf6 'nice'
\f2\b0 \cf0 ]));\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0 \cf0 \
}